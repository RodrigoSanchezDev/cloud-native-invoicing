name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Rename JARs for Docker
        run: |
          if [ ! -f invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar ]; then
            mv invoice-service/target/*.jar invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar
          fi
          if [ ! -f file-service/target/file-service-0.0.1-SNAPSHOT.jar ]; then
            mv file-service/target/*.jar file-service/target/file-service-0.0.1-SNAPSHOT.jar
          fi

      - name: Docker login
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build & push invoice-service
        run: |
          docker build -f Dockerfile.invoice -t $DOCKERHUB_USERNAME/invoice-service:${{ github.sha }} .
          docker push $DOCKERHUB_USERNAME/invoice-service:${{ github.sha }}

      - name: Build & push file-service
        run: |
          docker build -f Dockerfile.file -t $DOCKERHUB_USERNAME/file-service:${{ github.sha }} .
          docker push $DOCKERHUB_USERNAME/file-service:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Copy SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          if [ ! -s key.pem ]; then
            echo "Error: La clave SSH no se cargÃ³ correctamente." >&2
            exit 1
          fi

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST << 'EOF'
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
            docker pull $DOCKERHUB_USERNAME/invoice-service:${GITHUB_SHA}
            docker pull $DOCKERHUB_USERNAME/file-service:${GITHUB_SHA}
            docker stop invoice-service || true && docker rm invoice-service || true
            docker stop file-service    || true && docker rm file-service    || true
            docker run -d --name file-service -p 8081:8081 \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
              $DOCKERHUB_USERNAME/file-service:${GITHUB_SHA}
            docker run -d --name invoice-service -p 8080:8080 $DOCKERHUB_USERNAME/invoice-service:${GITHUB_SHA}
          EOF
