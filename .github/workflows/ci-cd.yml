name: Cloud Native Invoice Management CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN:      ${{ secrets.DOCKERHUB_TOKEN }}
  EC2_HOST:             ${{ secrets.EC2_HOST }}
  EC2_USER:             ${{ secrets.EC2_USER }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: ./mvnw clean compile -B

      - name: Run Tests
        run: ./mvnw test -B

      - name: Package Applications
        run: ./mvnw package -B -DskipTests=true

      - name: Rename JARs for Docker
        run: |
          if [ ! -f invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar ]; then
            mv invoice-service/target/*.jar invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar
          fi
          if [ ! -f file-service/target/file-service-0.0.1-SNAPSHOT.jar ]; then
            mv file-service/target/*.jar file-service/target/file-service-0.0.1-SNAPSHOT.jar
          fi
          if [ ! -f rabbitmq-service/target/rabbitmq-service-0.0.1-SNAPSHOT.jar ]; then
            mv rabbitmq-service/target/*.jar rabbitmq-service/target/rabbitmq-service-0.0.1-SNAPSHOT.jar
          fi

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests=true

      - name: Rename JARs for Docker
        run: |
          if [ ! -f invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar ]; then
            mv invoice-service/target/*.jar invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar
          fi
          if [ ! -f file-service/target/file-service-0.0.1-SNAPSHOT.jar ]; then
            mv file-service/target/*.jar file-service/target/file-service-0.0.1-SNAPSHOT.jar
          fi
          if [ ! -f rabbitmq-service/target/rabbitmq-service-0.0.1-SNAPSHOT.jar ]; then
            mv rabbitmq-service/target/*.jar rabbitmq-service/target/rabbitmq-service-0.0.1-SNAPSHOT.jar
          fi

      - name: Docker login
        run: echo "$DOCKERHUB_TOKEN" \
             | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build & push invoice-service
        run: |
          docker build -f Dockerfile.invoice \
                       -t $DOCKERHUB_USERNAME/invoice-service:latest .
          docker push $DOCKERHUB_USERNAME/invoice-service:latest

      - name: Build & push file-service
        run: |
          docker build -f Dockerfile.file \
                       -t $DOCKERHUB_USERNAME/file-service:latest .
          docker push $DOCKERHUB_USERNAME/file-service:latest

      - name: Build & push rabbitmq-service
        run: |
          docker build -f Dockerfile.rabbitmq \
                       -t $DOCKERHUB_USERNAME/rabbitmq-service:latest .
          docker push $DOCKERHUB_USERNAME/rabbitmq-service:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup deploy environment
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-east-1
          DOCKERHUB_USERNAME:    ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:       ${{ secrets.DOCKERHUB_TOKEN }}
        run: echo "Deploy environment variables configured"

      # Create initial S3 folder using AWS CLI and env vars
      - name: Create initial folder in S3
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN:     ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION:            us-east-1
          S3_BUCKET:             bucketssumativa1
        run: |
          chmod +x s3-folder-creation.sh
          bash s3-folder-creation.sh

      - name: Copy SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          if [ ! -s key.pem ]; then
            echo "Error: La clave SSH no se cargó correctamente." >&2
            exit 1
          fi

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-east-1
          DOCKERHUB_USERNAME:    ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:       ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -i key.pem $EC2_USER@$EC2_HOST <<EOF
            # Credenciales y región
            export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
            export AWS_REGION="$AWS_REGION"

            # Login a Docker Hub
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # Traer las últimas imágenes
            docker pull $DOCKERHUB_USERNAME/file-service:latest
            docker pull $DOCKERHUB_USERNAME/invoice-service:latest
            docker pull $DOCKERHUB_USERNAME/rabbitmq-service:latest

            # Parar y limpiar antiguos contenedores
            docker stop file-service invoice-service rabbitmq-service rabbitmq-server || true
            docker rm   file-service invoice-service rabbitmq-service rabbitmq-server || true

            # Levantar RabbitMQ Server
            docker run -d --restart unless-stopped --name rabbitmq-server -p 5672:5672 -p 15672:15672 \
              -e RABBITMQ_DEFAULT_USER=admin \
              -e RABBITMQ_DEFAULT_PASS=admin123 \
              rabbitmq:3.11-management

            # Esperar que RabbitMQ esté listo
            sleep 30

            # Levantar file-service con EFS montado
            docker run -d --restart unless-stopped --name file-service -p 8081:8081 \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e AZURE_TENANT_ID="28dbf599-4a0c-47c3-be6a-0790f3c7f43b" \
              -e AZURE_CLIENT_ID="eafae8e9-4496-4f00-a278-4ff30c03272c" \
              -e AZURE_JWK_SET_URI="https://DuoccloudnativeS6.b2clogin.com/DuoccloudnativeS6.onmicrosoft.com/discovery/v2.0/keys?p=B2C_1_AppS3" \
              -v /mnt/efs/invoices:/mnt/efs/invoices \
              $DOCKERHUB_USERNAME/file-service:latest

            # Levantar invoice-service con RabbitMQ habilitado
            docker run -d --restart unless-stopped --name invoice-service -p 8080:8080 \
              --link rabbitmq-server:rabbitmq \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e AZURE_TENANT_ID="28dbf599-4a0c-47c3-be6a-0790f3c7f43b" \
              -e AZURE_CLIENT_ID="eafae8e9-4496-4f00-a278-4ff30c03272c" \
              -e AZURE_JWK_SET_URI="https://DuoccloudnativeS6.b2clogin.com/DuoccloudnativeS6.onmicrosoft.com/discovery/v2.0/keys?p=B2C_1_AppS3" \
              -e AWS_API_GATEWAY_URL="https://5u6zchoeog.execute-api.us-east-1.amazonaws.com" \
              -e AWS_API_GATEWAY_STAGE="DEV" \
              -e RABBITMQ_ENABLED=true \
              -e RABBITMQ_HOST=rabbitmq \
              -e RABBITMQ_USERNAME=admin \
              -e RABBITMQ_PASSWORD=admin123 \
              $DOCKERHUB_USERNAME/invoice-service:latest

            # Levantar rabbitmq-service
            docker run -d --restart unless-stopped --name rabbitmq-service -p 8082:8082 \
              --link rabbitmq-server:rabbitmq \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e AZURE_TENANT_ID="28dbf599-4a0c-47c3-be6a-0790f3c7f43b" \
              -e AZURE_CLIENT_ID="eafae8e9-4496-4f00-a278-4ff30c03272c" \
              -e AZURE_JWK_SET_URI="https://DuoccloudnativeS6.b2clogin.com/DuoccloudnativeS6.onmicrosoft.com/discovery/v2.0/keys?p=B2C_1_AppS3" \
              -e RABBITMQ_HOST=rabbitmq \
              -e RABBITMQ_USERNAME=admin \
              -e RABBITMQ_PASSWORD=admin123 \
              -e ORACLE_DB_URL="jdbc:oracle:thin:@//your_oracle_host:1521/your_service_name" \
              -e ORACLE_DB_USERNAME="your_oracle_user" \
              -e ORACLE_DB_PASSWORD="your_oracle_password" \
              $DOCKERHUB_USERNAME/rabbitmq-service:latest
          EOF
