name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN:      ${{ secrets.DOCKERHUB_TOKEN }}
  EC2_HOST:             ${{ secrets.EC2_HOST }}
  EC2_USER:             ${{ secrets.EC2_USER }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Rename JARs for Docker
        run: |
          if [ ! -f invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar ]; then
            mv invoice-service/target/*.jar invoice-service/target/invoice-service-0.0.1-SNAPSHOT.jar
          fi
          if [ ! -f file-service/target/file-service-0.0.1-SNAPSHOT.jar ]; then
            mv file-service/target/*.jar file-service/target/file-service-0.0.1-SNAPSHOT.jar
          fi

      - name: Docker login
        run: echo "$DOCKERHUB_TOKEN" \
             | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build & push invoice-service
        run: |
          docker build -f Dockerfile.invoice \
                       -t $DOCKERHUB_USERNAME/invoice-service:latest .
          docker push $DOCKERHUB_USERNAME/invoice-service:latest

      - name: Build & push file-service
        run: |
          docker build -f Dockerfile.file \
                       -t $DOCKERHUB_USERNAME/file-service:latest .
          docker push $DOCKERHUB_USERNAME/file-service:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup deploy environment
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-east-1
          DOCKERHUB_USERNAME:    ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:       ${{ secrets.DOCKERHUB_TOKEN }}
        run: echo "Deploy environment variables configured"

      # Create initial S3 folder using AWS CLI and env vars
      - name: Create initial folder in S3
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN:     ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION:            us-east-1
          S3_BUCKET:             bucketssumativa1
        run: |
          chmod +x s3-folder-creation.sh
          bash s3-folder-creation.sh

      - name: Copy SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          if [ ! -s key.pem ]; then
            echo "Error: La clave SSH no se cargó correctamente." >&2
            exit 1
          fi

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-east-1
          DOCKERHUB_USERNAME:    ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:       ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -i key.pem $EC2_USER@$EC2_HOST <<EOF
            # Credenciales y región
            export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
            export AWS_REGION="$AWS_REGION"

            # Login a Docker Hub
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # Traer las últimas imágenes
            docker pull $DOCKERHUB_USERNAME/file-service:latest
            docker pull $DOCKERHUB_USERNAME/invoice-service:latest

            # Parar y limpiar antiguos contenedores
            docker stop file-service invoice-service || true
            docker rm   file-service invoice-service || true

            # Levantar file-service con EFS montado
            docker run -d --restart unless-stopped --name file-service -p 8081:8081 \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -v /mnt/efs/invoices:/mnt/efs/invoices \
              $DOCKERHUB_USERNAME/file-service:latest

            # Levantar invoice-service
            docker run -d --restart unless-stopped --name invoice-service -p 8080:8080 \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              $DOCKERHUB_USERNAME/invoice-service:latest
          EOF
